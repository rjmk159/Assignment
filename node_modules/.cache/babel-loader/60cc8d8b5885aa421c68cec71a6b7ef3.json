{"ast":null,"code":"import _objectSpread from \"/Users/rajajunaid/Desktop/react-assignment/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nvar _jsxFileName = \"/Users/rajajunaid/Desktop/react-assignment/src/container/MapContainer.js\";\nimport React, { Component } from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { MapContainerStyle } from \"../assets/styles/Map.style\";\nimport { strings } from '../utils/strings';\nimport { setLocations } from '../redux/actions';\nimport { connect } from \"react-redux\";\nconst mapStyles = {\n  map: {\n    width: \"100%\",\n    height: \"100vh\"\n  }\n};\n\nclass Map extends Component {\n  constructor(props) {\n    super(props);\n\n    this.setNearByLocation = () => {\n      let currentLocation = this.state.currentLocation;\n      let request = {\n        location: currentLocation,\n        types: this.props.selectedPlace || [\"ATM\"],\n        radius: 5000\n      };\n\n      if (this.props && this.props.google) {\n        const google = this.props.google;\n        let service = new google.maps.places.PlacesService(this.map);\n        service.nearbySearch(request, this.callback);\n      }\n    };\n\n    this.callback = (request, status) => {\n      this.props.setLocations(request);\n    };\n\n    const _this$props$initialCe = this.props.initialCenter,\n          lat = _this$props$initialCe.lat,\n          lng = _this$props$initialCe.lng;\n    this.state = {\n      currentLocation: {\n        lat: lat,\n        lng: lng\n      }\n    };\n  }\n\n  componentDidMount() {\n    if (this.props.centerAroundCurrentLocation) {\n      if (navigator && navigator.geolocation) {\n        navigator.geolocation.getCurrentPosition(pos => {\n          const coords = pos.coords;\n          this.setState({\n            currentLocation: {\n              lat: coords.latitude,\n              lng: coords.longitude\n            }\n          });\n        });\n      }\n    }\n\n    this.loadMap();\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    if (prevProps.google !== this.props.google) {\n      this.loadMap();\n    }\n\n    if (prevState.currentLocation !== this.state.currentLocation) {\n      this.recenterMap();\n    }\n  }\n\n  loadMap() {\n    this.props.setloading(true);\n\n    if (this.props && this.props.google) {\n      const google = this.props.google;\n      const currentLocation = this.state.currentLocation;\n      const maps = google.maps;\n      const mapRef = this.refs.map;\n      const node = ReactDOM.findDOMNode(mapRef);\n      let zoom = this.props.zoom;\n      const lat = currentLocation.lat,\n            lng = currentLocation.lng;\n      const center = new maps.LatLng(lat, lng);\n      this.setState({\n        center\n      });\n      const mapConfig = Object.assign({}, {\n        center: center,\n        zoom: zoom\n      });\n      this.map = new maps.Map(node, mapConfig);\n      this.props.setloading(false);\n    }\n  }\n\n  recenterMap() {\n    const map = this.map;\n    const currentLocation = this.state.currentLocation;\n    const current = currentLocation;\n    const google = this.props.google;\n    const maps = google.maps;\n\n    if (map) {\n      let center = new maps.LatLng(current.lat, current.lng);\n      map.panTo(center);\n    }\n  }\n\n  renderChildren() {\n    const children = this.props.children;\n    const currentLocation = this.state.currentLocation;\n    if (!children) return;\n    return React.Children.map(children, c => {\n      if (!c) return;\n      return React.cloneElement(c, {\n        map: this.map,\n        google: this.props.google,\n        mapCenter: currentLocation\n      });\n    });\n  }\n\n  render() {\n    let isLoading = this.props.isLoading;\n    const style = Object.assign({}, mapStyles.map);\n    return React.createElement(MapContainerStyle, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 118\n      },\n      __self: this\n    }, isLoading ? React.createElement(\"div\", {\n      style: style,\n      ref: \"map\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 120\n      },\n      __self: this\n    }) : 'Loading...', this.renderChildren(), React.createElement(\"div\", {\n      className: \"search-container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 123\n      },\n      __self: this\n    }, React.createElement(\"button\", {\n      onClick: this.setNearByLocation,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 124\n      },\n      __self: this\n    }, strings.SearchCtaText)));\n  }\n\n}\n\nconst mapStateToProps = state => _objectSpread({}, state);\n\nexport default connect(mapStateToProps, {\n  setLocations\n})(Map);\nMap.defaultProps = {\n  zoom: 14,\n  initialCenter: {\n    lat: 19.1700576,\n    lng: 72.8602116\n  },\n  centerAroundCurrentLocation: false,\n  visible: true\n};","map":{"version":3,"sources":["/Users/rajajunaid/Desktop/react-assignment/src/container/MapContainer.js"],"names":["React","Component","ReactDOM","MapContainerStyle","strings","setLocations","connect","mapStyles","map","width","height","Map","constructor","props","setNearByLocation","currentLocation","state","request","location","types","selectedPlace","radius","google","service","maps","places","PlacesService","nearbySearch","callback","status","initialCenter","lat","lng","componentDidMount","centerAroundCurrentLocation","navigator","geolocation","getCurrentPosition","pos","coords","setState","latitude","longitude","loadMap","componentDidUpdate","prevProps","prevState","recenterMap","setloading","mapRef","refs","node","findDOMNode","zoom","center","LatLng","mapConfig","Object","assign","current","panTo","renderChildren","children","Children","c","cloneElement","mapCenter","render","isLoading","style","SearchCtaText","mapStateToProps","defaultProps","visible"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { MapContainerStyle } from \"../assets/styles/Map.style\";\nimport { strings } from '../utils/strings';\nimport { setLocations } from '../redux/actions';\nimport { connect } from \"react-redux\";\n\nconst mapStyles = {\n  map: {\n    width: \"100%\",\n    height: \"100vh\"\n  }\n};\n\nclass Map extends Component {\n  constructor(props) {\n    super(props);\n    const { lat, lng } = this.props.initialCenter;\n    this.state = {\n      currentLocation: {\n        lat: lat,\n        lng: lng\n      }\n    };\n  }\n\n  componentDidMount() {\n    if (this.props.centerAroundCurrentLocation) {\n      if (navigator && navigator.geolocation) {\n        navigator.geolocation.getCurrentPosition(pos => {\n          const coords = pos.coords;\n          this.setState({\n            currentLocation: {\n              lat: coords.latitude,\n              lng: coords.longitude\n            }\n          });\n        });\n      }\n    }\n    this.loadMap();\n  }\n  componentDidUpdate(prevProps, prevState) {\n    if (prevProps.google !== this.props.google) {\n      this.loadMap();\n    }\n    if (prevState.currentLocation !== this.state.currentLocation) {\n      this.recenterMap();\n    }\n  }\n  loadMap() {\n    this.props.setloading(true);\n    if (this.props && this.props.google) {\n      const { google } = this.props;\n      const { currentLocation } = this.state;\n      const maps = google.maps;\n      const mapRef = this.refs.map;\n      const node = ReactDOM.findDOMNode(mapRef);\n      let { zoom } = this.props;\n      const { lat, lng } = currentLocation;\n      const center = new maps.LatLng(lat, lng);\n      this.setState({ center });\n      const mapConfig = Object.assign(\n        {},\n        {\n          center: center,\n          zoom: zoom\n        }\n      );\n      this.map = new maps.Map(node, mapConfig);\n      this.props.setloading(false);\n    }\n  }\n  recenterMap() {\n    const map = this.map;\n    const { currentLocation } = this.state;\n    const current = currentLocation;\n    const google = this.props.google;\n    const maps = google.maps;\n    if (map) {\n      let center = new maps.LatLng(current.lat, current.lng);\n      map.panTo(center);\n    }\n  }\n  renderChildren() {\n    const { children } = this.props;\n    const { currentLocation } = this.state;\n    if (!children) return;\n    return React.Children.map(children, c => {\n      if (!c) return;\n      return React.cloneElement(c, {\n        map: this.map,\n        google: this.props.google,\n        mapCenter: currentLocation\n      });\n    });\n  }\n  setNearByLocation = () => {\n    let {currentLocation} = this.state;\n    let request = {\n      location: currentLocation,\n      types: this.props.selectedPlace || [\"ATM\"],\n      radius: 5000\n    };\n    if (this.props && this.props.google) {\n      const { google } = this.props;\n      let service = new google.maps.places.PlacesService(this.map);\n      service.nearbySearch(request, this.callback);\n    }\n  };\n  callback = (request, status) => {\n    this.props.setLocations(request);\n  };\n  render() {\n    let { isLoading } = this.props\n    const style = Object.assign({}, mapStyles.map);\n    return (\n      <MapContainerStyle>\n        {isLoading?\n        (<div style={style} ref=\"map\">\n        </div>):'Loading...'}\n        {this.renderChildren()}\n        <div className=\"search-container\">\n          <button onClick={this.setNearByLocation}>{strings.SearchCtaText}</button>\n        </div>\n      </MapContainerStyle>\n    );\n  }\n}\n\n\nconst mapStateToProps = state => ({\n  ...state\n});\n\nexport default connect(mapStateToProps, { setLocations })(Map);\n\nMap.defaultProps = {\n  zoom: 14,\n  initialCenter: {\n    lat: 19.1700576,\n    lng: 72.8602116\n  },\n  centerAroundCurrentLocation: false,\n  visible: true\n};\n"]},"metadata":{},"sourceType":"module"}