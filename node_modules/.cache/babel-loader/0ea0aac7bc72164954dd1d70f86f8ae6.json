{"ast":null,"code":"import _objectSpread from \"/Users/rajajunaid/Desktop/react-assignment/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nvar _jsxFileName = \"/Users/rajajunaid/Desktop/react-assignment/src/components/PlaceType.js\";\nimport React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport Helper from \"../utils/Helper\";\nimport { strings } from \"../utils/strings\";\nimport { setTypes } from \"../redux/actions\";\n\nclass PlaceType extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      selectedList: [],\n      types: this.props.types || []\n    };\n\n    this.handleInputChange = event => {\n      const target = event.target;\n      const value = target.type === \"checkbox\" ? target.checked : target.value;\n      const name = target.value;\n      let _type = this.state.selectedList;\n\n      if (_type.includes(name)) {\n        let index = _type.indexOf(name);\n\n        _type.splice(index, 1);\n      } else {\n        _type.push(name);\n      }\n\n      this.setState({\n        selectedList: _type\n      }, () => {\n        this.props.selectedPlace(_type);\n      });\n    };\n\n    this.handleFindString = e => {\n      let _value = e.target.value;\n      let _this$props = this.props,\n          types = _this$props.types,\n          initialTypes = _this$props.initialTypes,\n          setTypes = _this$props.setTypes;\n      _value = _value.toLowerCase();\n      this.setState({\n        value: _value\n      });\n\n      if (_value === \"\") {\n        this.setState({\n          types: initialTypes\n        });\n        return;\n      }\n\n      const regex = new RegExp(_value);\n      let newTypes = types.filter(element => regex.test(element, _value));\n      setTypes(newTypes); // this.setState({ types: newTypes });\n    };\n  }\n\n  componentWillReceiveProps(nextProps) {\n    this.setState({// types : nextProps.types\n    });\n  }\n\n  render() {\n    let types = this.props.types;\n    return React.createElement(\"div\", {\n      className: \"types--container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 60\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"types--searchbox\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 61\n      },\n      __self: this\n    }, React.createElement(\"input\", {\n      type: \"text\",\n      placeholder: strings.SearchPlaceHolder,\n      onChange: e => this.handleFindString(e),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 62\n      },\n      __self: this\n    }), React.createElement(\"span\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 67\n      },\n      __self: this\n    }, strings.NearMe)), types.map((item, index) => {\n      item = Helper.replaceDash(item);\n      return React.createElement(\"label\", {\n        key: index,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 72\n        },\n        __self: this\n      }, React.createElement(\"input\", {\n        type: \"checkbox\",\n        className: \"types\",\n        value: item,\n        onChange: this.handleInputChange,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 73\n        },\n        __self: this\n      }), Helper.capitalizeFirstLetter(item));\n    }));\n  }\n\n}\n\nconst mapStateToProps = state => _objectSpread({}, state);\n\nexport default connect(mapStateToProps, {\n  setTypes\n})(PlaceType);","map":{"version":3,"sources":["/Users/rajajunaid/Desktop/react-assignment/src/components/PlaceType.js"],"names":["React","Component","connect","Helper","strings","setTypes","PlaceType","state","selectedList","types","props","handleInputChange","event","target","value","type","checked","name","_type","includes","index","indexOf","splice","push","setState","selectedPlace","handleFindString","e","_value","initialTypes","toLowerCase","regex","RegExp","newTypes","filter","element","test","componentWillReceiveProps","nextProps","render","SearchPlaceHolder","NearMe","map","item","replaceDash","capitalizeFirstLetter","mapStateToProps"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport Helper from \"../utils/Helper\";\nimport { strings } from \"../utils/strings\";\nimport { setTypes } from \"../redux/actions\";\n\nclass PlaceType extends Component {\n  state = {\n    selectedList: [],\n    types:this.props.types || []\n  };\n\n  componentWillReceiveProps(nextProps){\n    this.setState({\n      // types : nextProps.types\n    })\n  }  \n\n  handleInputChange = event => {\n    const target = event.target;\n    const value = target.type === \"checkbox\" ? target.checked : target.value;\n    const name = target.value;\n    let _type = this.state.selectedList;\n    if (_type.includes(name)) {\n      let index = _type.indexOf(name);\n      _type.splice(index, 1);\n    } else {\n      _type.push(name);\n    }\n    this.setState(\n      {\n        selectedList: _type\n      },\n      () => {\n        this.props.selectedPlace(_type);\n      }\n    );\n  };\n\n  handleFindString = e => {\n    let _value = e.target.value;\n    let { types, initialTypes, setTypes } = this.props;\n    _value = _value.toLowerCase();\n    this.setState({ value: _value });\n    if (_value === \"\") {\n      this.setState({ types: initialTypes });\n      return;\n    }\n    const regex = new RegExp(_value);\n    let newTypes = types.filter(element =>\n      regex.test(element, _value)\n    );\n    setTypes(newTypes);\n    // this.setState({ types: newTypes });\n  };\n\n  render() {\n    let { types } = this.props;\n    return (\n      <div className=\"types--container\">\n        <div className=\"types--searchbox\">\n          <input\n            type=\"text\"\n            placeholder={strings.SearchPlaceHolder}\n            onChange={e => this.handleFindString(e)}\n          />\n          <span>{strings.NearMe}</span>\n        </div>\n        {types.map((item, index) => {\n          item = Helper.replaceDash(item);\n          return (\n            <label key={index}>\n              <input\n                type=\"checkbox\"\n                className=\"types\"\n                value={item}\n                onChange={this.handleInputChange}\n              />\n              {Helper.capitalizeFirstLetter(item)}\n            </label>\n          );\n        })}\n      </div>\n    );\n  }\n\n}\n\nconst mapStateToProps = state => ({\n  ...state\n});\n\nexport default connect(mapStateToProps, {setTypes})(PlaceType);\n"]},"metadata":{},"sourceType":"module"}