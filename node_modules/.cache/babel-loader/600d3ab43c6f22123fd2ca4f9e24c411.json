{"ast":null,"code":"var _jsxFileName = \"/Users/rajajunaid/Desktop/react-assignment/src/container/MapContainer.js\";\nimport React, { Component } from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { MapContainerStyle } from \"../assets/styles/Map.style\";\nimport { strings } from '../utils/strings';\n\nclass Map extends Component {\n  constructor(props) {\n    super(props);\n\n    this.setNearByLocation = () => {\n      let request = {\n        location: this.state.currentLocation,\n        types: this.props.selectedPlace || [\"ATM\"],\n        radius: 5000\n      };\n\n      if (this.props && this.props.google) {\n        const google = this.props.google;\n        let service = new google.maps.places.PlacesService(this.map);\n        service.nearbySearch(request, this.callback);\n      }\n    };\n\n    this.callback = (request, status) => {\n      this.props.setLocations(request);\n    };\n\n    const _this$props$initialCe = this.props.initialCenter,\n          lat = _this$props$initialCe.lat,\n          lng = _this$props$initialCe.lng;\n    this.state = {\n      currentLocation: {\n        lat: lat,\n        lng: lng\n      }\n    };\n  }\n\n  componentDidMount() {\n    if (this.props.centerAroundCurrentLocation) {\n      if (navigator && navigator.geolocation) {\n        navigator.geolocation.getCurrentPosition(pos => {\n          const coords = pos.coords;\n          this.setState({\n            currentLocation: {\n              lat: coords.latitude,\n              lng: coords.longitude\n            }\n          });\n        });\n      }\n    }\n\n    this.loadMap();\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    if (prevProps.google !== this.props.google) {\n      this.loadMap();\n    }\n\n    if (prevState.currentLocation !== this.state.currentLocation) {\n      this.recenterMap();\n    }\n  }\n\n  loadMap() {\n    if (this.props && this.props.google) {\n      const google = this.props.google;\n      const maps = google.maps;\n      const mapRef = this.refs.map;\n      const node = ReactDOM.findDOMNode(mapRef);\n      let zoom = this.props.zoom;\n      const _this$state$currentLo = this.state.currentLocation,\n            lat = _this$state$currentLo.lat,\n            lng = _this$state$currentLo.lng;\n      const center = new maps.LatLng(lat, lng);\n      this.setState({\n        center\n      });\n      const mapConfig = Object.assign({}, {\n        center: center,\n        zoom: zoom\n      });\n      this.map = new maps.Map(node, mapConfig);\n    }\n  }\n\n  recenterMap() {\n    const map = this.map;\n    const current = this.state.currentLocation;\n    const google = this.props.google;\n    const maps = google.maps;\n\n    if (map) {\n      let center = new maps.LatLng(current.lat, current.lng);\n      map.panTo(center);\n    }\n  }\n\n  renderChildren() {\n    const children = this.props.children;\n    if (!children) return;\n    return React.Children.map(children, c => {\n      if (!c) return;\n      return React.cloneElement(c, {\n        map: this.map,\n        google: this.props.google,\n        mapCenter: this.state.currentLocation\n      });\n    });\n  }\n\n  render() {\n    return React.createElement(MapContainerStyle, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 102\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      ref: \"map\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 103\n      },\n      __self: this\n    }, \"Loading map...\"), this.renderChildren(), React.createElement(\"div\", {\n      className: \"search-container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 107\n      },\n      __self: this\n    }, React.createElement(\"button\", {\n      onClick: this.setNearByLocation,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 108\n      },\n      __self: this\n    }, strings.SearchCtaText)));\n  }\n\n}\n\nexport default Map;\nMap.defaultProps = {\n  zoom: 14,\n  initialCenter: {\n    lat: 19.1700576,\n    lng: 72.8602116\n  },\n  centerAroundCurrentLocation: false,\n  visible: true\n};","map":{"version":3,"sources":["/Users/rajajunaid/Desktop/react-assignment/src/container/MapContainer.js"],"names":["React","Component","ReactDOM","MapContainerStyle","strings","Map","constructor","props","setNearByLocation","request","location","state","currentLocation","types","selectedPlace","radius","google","service","maps","places","PlacesService","map","nearbySearch","callback","status","setLocations","initialCenter","lat","lng","componentDidMount","centerAroundCurrentLocation","navigator","geolocation","getCurrentPosition","pos","coords","setState","latitude","longitude","loadMap","componentDidUpdate","prevProps","prevState","recenterMap","mapRef","refs","node","findDOMNode","zoom","center","LatLng","mapConfig","Object","assign","current","panTo","renderChildren","children","Children","c","cloneElement","mapCenter","render","SearchCtaText","defaultProps","visible"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { MapContainerStyle } from \"../assets/styles/Map.style\";\nimport { strings } from '../utils/strings'\n\nclass Map extends Component {\n  constructor(props) {\n    super(props);\n    const { lat, lng } = this.props.initialCenter;\n    this.state = {\n      currentLocation: {\n        lat: lat,\n        lng: lng\n      }\n    };\n  }\n\n  componentDidMount() {\n    if (this.props.centerAroundCurrentLocation) {\n      if (navigator && navigator.geolocation) {\n        navigator.geolocation.getCurrentPosition(pos => {\n          const coords = pos.coords;\n          this.setState({\n            currentLocation: {\n              lat: coords.latitude,\n              lng: coords.longitude\n            }\n          });\n        });\n      }\n    }\n    this.loadMap();\n  }\n  componentDidUpdate(prevProps, prevState) {\n    if (prevProps.google !== this.props.google) {\n      this.loadMap();\n    }\n    if (prevState.currentLocation !== this.state.currentLocation) {\n      this.recenterMap();\n    }\n  }\n  loadMap() {\n    if (this.props && this.props.google) {\n      const { google } = this.props;\n      const maps = google.maps;\n      const mapRef = this.refs.map;\n      const node = ReactDOM.findDOMNode(mapRef);\n      let { zoom } = this.props;\n      const { lat, lng } = this.state.currentLocation;\n      const center = new maps.LatLng(lat, lng);\n      this.setState({ center });\n      const mapConfig = Object.assign(\n        {},\n        {\n          center: center,\n          zoom: zoom\n        }\n      );\n      this.map = new maps.Map(node, mapConfig);\n    }\n  }\n  recenterMap() {\n    const map = this.map;\n    const current = this.state.currentLocation;\n    const google = this.props.google;\n    const maps = google.maps;\n    if (map) {\n      let center = new maps.LatLng(current.lat, current.lng);\n      map.panTo(center);\n    }\n  }\n  renderChildren() {\n    const { children } = this.props;\n    if (!children) return;\n\n    return React.Children.map(children, c => {\n      if (!c) return;\n      return React.cloneElement(c, {\n        map: this.map,\n        google: this.props.google,\n        mapCenter: this.state.currentLocation\n      });\n    });\n  }\n  setNearByLocation = () => {\n    let request = {\n      location: this.state.currentLocation,\n      types: this.props.selectedPlace || [\"ATM\"],\n      radius: 5000\n    };\n    if (this.props && this.props.google) {\n      const { google } = this.props;\n      let service = new google.maps.places.PlacesService(this.map);\n      service.nearbySearch(request, this.callback);\n    }\n  };\n  callback = (request, status) => {\n    this.props.setLocations(request);\n  };\n  render() {\n    return (\n      <MapContainerStyle>\n        <div ref=\"map\">\n          Loading map...\n        </div>\n        {this.renderChildren()}\n        <div className=\"search-container\">\n          <button onClick={this.setNearByLocation}>{strings.SearchCtaText}</button>\n        </div>\n      </MapContainerStyle>\n    );\n  }\n}\nexport default Map;\nMap.defaultProps = {\n  zoom: 14,\n  initialCenter: {\n    lat: 19.1700576,\n    lng: 72.8602116\n  },\n  centerAroundCurrentLocation: false,\n  visible: true\n};\n"]},"metadata":{},"sourceType":"module"}