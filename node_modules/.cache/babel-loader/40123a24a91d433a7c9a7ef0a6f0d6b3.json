{"ast":null,"code":"var _jsxFileName = \"/Users/rajajunaid/Desktop/react-assignment/src/components/MapContainer.js\";\nimport React, { Component } from 'react';\nimport ReactDOM from 'react-dom';\nimport { MapContainer } from './styles/Map.style';\nimport { GoogleApiWrapper, InfoWindow, Marker } from 'google-maps-react';\nconst mapStyles = {\n  map: {\n    width: '100%',\n    height: '300px'\n  }\n};\n\nclass Map extends Component {\n  constructor(props) {\n    super(props);\n\n    this.setNearByLocation = () => {\n      let request = {\n        location: this.state.currentLocation,\n        types: [\"atm\"],\n        radius: 5000\n      };\n\n      if (this.props && this.props.google) {\n        const google = this.props.google;\n        console.log('this.map', this.map);\n        let service = new google.maps.places.PlacesService(this.map);\n        service.nearbySearch(request, this.callback);\n      }\n    };\n\n    this.callback = (request, status) => {\n      console.log(request);\n      this.props.setLocations(request);\n    };\n\n    const _this$props$initialCe = this.props.initialCenter,\n          lat = _this$props$initialCe.lat,\n          lng = _this$props$initialCe.lng;\n    this.state = {\n      currentLocation: {\n        lat: lat,\n        lng: lng\n      }\n    };\n  }\n\n  componentDidMount() {\n    if (this.props.centerAroundCurrentLocation) {\n      if (navigator && navigator.geolocation) {\n        navigator.geolocation.getCurrentPosition(pos => {\n          const coords = pos.coords;\n          console.log('current Location', coords.latitude, coords.longitude);\n          this.setState({\n            currentLocation: {\n              lat: coords.latitude,\n              lng: coords.longitude\n            }\n          });\n        });\n      }\n    }\n\n    this.loadMap();\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    if (prevProps.google !== this.props.google) {\n      this.loadMap();\n    }\n\n    if (prevState.currentLocation !== this.state.currentLocation) {\n      this.recenterMap();\n    }\n  }\n\n  loadMap() {\n    if (this.props && this.props.google) {\n      // checks if google is available\n      const google = this.props.google;\n      const maps = google.maps;\n      const mapRef = this.refs.map; // reference to the actual DOM element\n\n      const node = ReactDOM.findDOMNode(mapRef);\n      let zoom = this.props.zoom;\n      const _this$state$currentLo = this.state.currentLocation,\n            lat = _this$state$currentLo.lat,\n            lng = _this$state$currentLo.lng;\n      const center = new maps.LatLng(lat, lng);\n      this.setState({\n        center\n      });\n      const mapConfig = Object.assign({}, {\n        center: center,\n        zoom: zoom\n      }); // maps.Map() is constructor that instantiates the map\n\n      this.map = new maps.Map(node, mapConfig);\n    }\n  }\n\n  recenterMap() {\n    const map = this.map;\n    const current = this.state.currentLocation;\n    const google = this.props.google;\n    const maps = google.maps;\n\n    if (map) {\n      let center = new maps.LatLng(current.lat, current.lng);\n      map.panTo(center);\n    }\n  }\n\n  renderChildren() {\n    const children = this.props.children;\n    if (!children) return;\n    return React.Children.map(children, c => {\n      if (!c) return;\n      return React.cloneElement(c, {\n        map: this.map,\n        google: this.props.google,\n        mapCenter: this.state.currentLocation\n      });\n    });\n  }\n\n  render() {\n    const style = Object.assign({}, mapStyles.map);\n    console.log(this.state);\n    return React.createElement(MapContainer, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 122\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      style: style,\n      ref: \"map\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 123\n      },\n      __self: this\n    }, \"Loading map...\"), React.createElement(\"button\", {\n      style: {\n        position: 'absolute'\n      },\n      onClick: this.setNearByLocation,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 127\n      },\n      __self: this\n    }, \"JUNAID\"));\n  }\n\n}\n\nexport default Map;\nMap.defaultProps = {\n  zoom: 14,\n  initialCenter: {\n    lat: 19.1700576,\n    lng: 72.8602116\n  },\n  centerAroundCurrentLocation: false,\n  visible: true\n};","map":{"version":3,"sources":["/Users/rajajunaid/Desktop/react-assignment/src/components/MapContainer.js"],"names":["React","Component","ReactDOM","MapContainer","GoogleApiWrapper","InfoWindow","Marker","mapStyles","map","width","height","Map","constructor","props","setNearByLocation","request","location","state","currentLocation","types","radius","google","console","log","service","maps","places","PlacesService","nearbySearch","callback","status","setLocations","initialCenter","lat","lng","componentDidMount","centerAroundCurrentLocation","navigator","geolocation","getCurrentPosition","pos","coords","latitude","longitude","setState","loadMap","componentDidUpdate","prevProps","prevState","recenterMap","mapRef","refs","node","findDOMNode","zoom","center","LatLng","mapConfig","Object","assign","current","panTo","renderChildren","children","Children","c","cloneElement","mapCenter","render","style","position","defaultProps","visible"],"mappings":"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","sourcesContent":["import React,{Component} from 'react';\nimport ReactDOM from 'react-dom';\nimport {MapContainer} from './styles/Map.style'\nimport { GoogleApiWrapper, InfoWindow, Marker } from 'google-maps-react';\nconst mapStyles = {\n  map: {\n    width: '100%',\n    height: '300px'\n  }\n};\nclass Map extends Component {\n  constructor(props) {\n    super(props);\n    const { lat, lng } = this.props.initialCenter;\n    this.state = {\n      currentLocation: {\n        lat: lat,\n        lng: lng\n      },\n    };\n  }\n\n  componentDidMount() {\n    if (this.props.centerAroundCurrentLocation) {\n      if (navigator && navigator.geolocation) {\n        navigator.geolocation.getCurrentPosition(pos => {\n          const coords = pos.coords;\n          console.log('current Location',coords.latitude,coords.longitude)\n          this.setState({\n            currentLocation: {\n              lat: coords.latitude,\n              lng: coords.longitude\n            }\n          });\n        });\n      }\n    }\n    this.loadMap();\n  }\n  componentDidUpdate(prevProps, prevState) {\n    if (prevProps.google !== this.props.google) {\n      this.loadMap();\n    }\n    if (prevState.currentLocation !== this.state.currentLocation) {\n      this.recenterMap();\n    }\n  }\n  loadMap() {\n    if (this.props && this.props.google) {\n      // checks if google is available\n      const { google } = this.props;\n      const maps = google.maps;\n\n      const mapRef = this.refs.map;\n\n      // reference to the actual DOM element\n      const node = ReactDOM.findDOMNode(mapRef);\n      let { zoom } = this.props;\n      const { lat, lng } = this.state.currentLocation;\n      const center = new maps.LatLng(lat, lng);\n      this.setState({center})\n      const mapConfig = Object.assign(\n        {},\n        {\n          center: center,\n          zoom: zoom\n        }\n      );\n      // maps.Map() is constructor that instantiates the map\n      this.map = new maps.Map(node, mapConfig);\n    }\n  }\n  recenterMap() {\n    const map = this.map;\n    const current = this.state.currentLocation;\n\n    const google = this.props.google;\n    const maps = google.maps;\n\n    if (map) {\n      let center = new maps.LatLng(current.lat, current.lng);\n      map.panTo(center);\n    }\n  }\n  renderChildren() {\n    const { children } = this.props;\n\n    if (!children) return;\n\n    return React.Children.map(children, c => {\n      if (!c) return;\n      return React.cloneElement(c, {\n        map: this.map,\n        google: this.props.google,\n        mapCenter: this.state.currentLocation\n      });\n    });\n  }\n  setNearByLocation = ()=>{\n    let request = {\n      location: this.state.currentLocation,\n      types: [\"atm\"],\n      radius: 5000,\n    };\n    if (this.props && this.props.google) {\n      const { google } = this.props;\n      console.log('this.map',this.map)\n      let service = new google.maps.places.PlacesService(this.map);\n\n      service.nearbySearch(request, this.callback);\n    }\n  }\n  callback = (request,status) =>{\n   \n    console.log(request);\n     this.props.setLocations(request);\n  }\n  render(){\n    const style = Object.assign({}, mapStyles.map);\n    console.log(this.state)\n  return (\n    <MapContainer>\n        <div style={style} ref=\"map\">\n          Loading map...\n        </div>\n        {/* {this.renderChildren()} */}\n        <button style={{position:'absolute'}} onClick={this.setNearByLocation}>JUNAID</button>\n    </MapContainer>\n    );\n  }\n}\nexport default Map;\nMap.defaultProps = {\n  zoom: 14,\n  initialCenter: {\n    lat: 19.1700576,\n    lng: 72.8602116\n  },\n  centerAroundCurrentLocation: false,\n  visible: true\n};"]},"metadata":{},"sourceType":"module"}